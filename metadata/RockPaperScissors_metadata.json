"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum RockPaperScissors.Move\",\"name\":\"playerMove\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum RockPaperScissors.Move\",\"name\":\"botMove\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"playerWon\",\"type\":\"bool\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gameFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesPlayed\",\"type\":\"uint256\"}],\"internalType\":\"struct RockPaperScissors.PlayerStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesPlayed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_playerMove\",\"type\":\"uint8\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RockPaperScissors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract RockPaperScissors {\\n    enum Move { None, Rock, Paper, Scissors }\\n\\n    struct PlayerStats {\\n        uint256 wins;\\n        uint256 losses;\\n        uint256 gamesPlayed;\\n    }\\n\\n    mapping(address => PlayerStats) public leaderboard;\\n    uint256 public gameFee = 0.1 ether;\\n\\n    event GamePlayed(address indexed player, Move playerMove, Move botMove, bool playerWon);\\n\\n    function play(uint8 _playerMove) external payable {\\n        require(msg.value == gameFee, \\\"Invalid game fee\\\");\\n        require(_playerMove >= 1 && _playerMove <= 3, \\\"Invalid move\\\");\\n\\n        Move playerMove = Move(_playerMove);\\n        Move botMove = getBotMove(playerMove);\\n\\n        bool playerWon = determineWinner(playerMove, botMove) == msg.sender;\\n\\n        leaderboard[msg.sender].gamesPlayed++;\\n        if (playerWon) {\\n            leaderboard[msg.sender].wins++;\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            leaderboard[msg.sender].losses++;\\n        }\\n\\n        emit GamePlayed(msg.sender, playerMove, botMove, playerWon);\\n    }\\n\\n    function getBotMove(Move _playerMove) internal view returns (Move) {\\n        uint256 rand = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, blockhash(block.number - 1))));\\n        uint256 chance = rand % 100;\\n\\n        if (chance < 80) {\\n            if (_playerMove == Move.Rock) return Move.Paper;\\n            if (_playerMove == Move.Paper) return Move.Scissors;\\n            if (_playerMove == Move.Scissors) return Move.Rock;\\n        }\\n        return Move((rand % 3) + 1);\\n    }\\n\\n    function determineWinner(Move player, Move bot) internal view returns (address) {\\n        if (player == bot) return address(0);\\n        if ((player == Move.Rock && bot == Move.Scissors) ||\\n            (player == Move.Paper && bot == Move.Rock) ||\\n            (player == Move.Scissors && bot == Move.Paper)) {\\n            return msg.sender;\\n        }\\n        return address(this);\\n    }\\n\\n    function getPlayerStats(address player) external view returns (PlayerStats memory) {\\n        return leaderboard[player];\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xba20f98a1ba6d0fb9116efb23c70041db1c01fc0a2bbc31ebeeff91969ccad96\",\"license\":\"MIT\"}},\"version\":1}"