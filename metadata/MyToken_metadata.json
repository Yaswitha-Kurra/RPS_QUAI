"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"result\",\"type\":\"string\"}],\"name\":\"GamePlayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"entryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderboard\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGames\",\"type\":\"uint256\"}],\"internalType\":\"struct MyToken.Player[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"playerMove\",\"type\":\"uint8\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGames\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyToken.sol\":\"MyToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ncontract MyToken {\\n    struct Player {\\n        address playerAddress;\\n        uint256 wins;\\n        uint256 losses;\\n        uint256 totalGames;\\n    }\\n\\n    mapping(address => Player) public players;\\n    address[] public playerAddresses;\\n    address public owner;\\n    uint256 public entryFee = 0.1 ether;\\n\\n    event PlayerJoined(address indexed player);\\n    event GamePlayed(address indexed player, string result);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function play(uint8 playerMove) public payable {\\n        require(msg.value >= entryFee, \\\"Entry fee is 0.1 Quai\\\");\\n\\n        // If player is new, add them\\n        if (players[msg.sender].playerAddress == address(0)) {\\n            players[msg.sender] = Player({\\n                playerAddress: msg.sender,\\n                wins: 0,\\n                losses: 0,\\n                totalGames: 0\\n            });\\n            playerAddresses.push(msg.sender); // \\u2705 Important to push into array\\n            emit PlayerJoined(msg.sender);\\n        }\\n\\n        // Generate bot's move (pseudo-random)\\n        uint8 botMove = uint8(uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 3);\\n\\n        // Update player stats based on outcome\\n        if (playerMove == botMove) {\\n            players[msg.sender].totalGames++;\\n            emit GamePlayed(msg.sender, \\\"Draw\\\");\\n        } else if ((playerMove + 1) % 3 == botMove) {\\n            players[msg.sender].losses++;\\n            players[msg.sender].totalGames++;\\n            emit GamePlayed(msg.sender, \\\"Loss\\\");\\n        } else {\\n            players[msg.sender].wins++;\\n            players[msg.sender].totalGames++;\\n            emit GamePlayed(msg.sender, \\\"Win\\\");\\n        }\\n    }\\n\\n    function getLeaderboard() public view returns (Player[] memory) {\\n        Player[] memory leaderboard = new Player[](playerAddresses.length);\\n        for (uint256 i = 0; i < playerAddresses.length; i++) {\\n            leaderboard[i] = players[playerAddresses[i]];\\n        }\\n        return leaderboard;\\n    }\\n\\n    function withdraw() public {\\n        require(msg.sender == owner, \\\"Only owner can withdraw\\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x09e4e4281cb85d076ef52dfae641c3603d03ca1a1b7f95bc47bf0dcffa6677e4\",\"license\":\"MIT\"}},\"version\":1}"